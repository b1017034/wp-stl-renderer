class STLHandler{camera;renderer;controls;scene;light;mesh;initZoom=1;initLightColor=16777215;initColor=16614431;initRotationX=0;initRotationY=0;initRotationZ=0;initLightX=0;initLightY=0;initLightZ=0;constructor(i,t,e){this.setConfig(e);e=document.getElementById(t);if(e){this.initCamera(e),this.initRenderer(e),this.initControl(),this.scene=new THREE.Scene,this.light=new THREE.HemisphereLight(this.initLightColor,1e3),this.initLight(),this.scene.add(this.light);const n=this;(new THREE.STLLoader).load(i,function(i){var t=new THREE.MeshPhongMaterial({color:n.initColor,specular:100,shininess:100}),t=(n.mesh=new THREE.Mesh(i,t),n.scene.add(n.mesh),n.initRotation(),new THREE.Vector3),t=(i.computeBoundingBox(),i.boundingBox.getCenter(t),n.mesh.geometry.applyMatrix4((new THREE.Matrix4).makeTranslation(-t.x,-t.y,-t.z)),Math.max(i.boundingBox.max.x,i.boundingBox.max.y,i.boundingBox.max.z));n.camera.position.z=1.5*t;function e(){requestAnimationFrame(e),n.controls.update(),n.renderer.render(n.scene,n.camera)}e()})}}remove(){this.scene.remove(this.mesh),this.mesh.material.dispose(),this.mesh.geometry.dispose()}initCamera(i){this.camera=new THREE.OrthographicCamera(i.clientWidth/-2,i.clientWidth/2,i.clientHeight/2,i.clientHeight/-2),this.camera.zoom=this.initZoom,this.camera.updateProjectionMatrix()}initRenderer(i){this.renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0}),this.renderer.setSize(i.clientWidth,i.clientHeight),this.renderer.setPixelRatio(i.clientWidth/i.clientHeight),i.appendChild(this.renderer.domElement)}initControl(){this.controls=new THREE.OrbitControls(this.camera,this.renderer.domElement),this.controls.enableDamping=!0,this.controls.rotateSpeed=.5,this.controls.dampingFactor=.1,this.controls.enableZoom=!0}initRotation(){this.mesh.rotation.x=this.initRotationX/360*Math.PI,this.mesh.rotation.y=this.initRotationY/360*Math.PI,this.mesh.rotation.z=this.initRotationZ/360*Math.PI}initLight(){this.light.position.x=this.initLightX,this.light.position.y=this.initLightY,this.light.position.z=this.initLightZ}setConfig(i){for(const t in i)switch(t){case"initZoom":this.initZoom=i[t];break;case"initColor":this.initColor=i[t];break;case"initRotationX":this.initRotationX=i[t];break;case"initRotationY":this.initRotationY=i[t];break;case"initRotationZ":this.initRotationZ=i[t];break;case"initLightX":this.initLightX=i[t];break;case"initLightY":this.initLightY=i[t];break;case"initLightZ":this.initLightZ=i[t]}}}
